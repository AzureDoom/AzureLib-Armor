plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '[6.0.12,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
    id "com.modrinth.minotaur" version "2.+"
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

import groovy.json.JsonOutput
import groovy.json.JsonSlurper

version = modVersion
group = mavenGroup

base {
    archivesName = modName
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    mappings channel: "official", version: "1.20.1"
    copyIdeResources = true
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory project.file("run/${it.name}")
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
            mods {
                "${modID}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', modID
            taskName 'azurelib-armor-neoforge120_client'
        }

        server {
            property 'forge.enabledGameTestNamespaces', modID
            taskName 'azurelib-armor-neoforge120_server'
            args '--nogui'
        }
    }
}

mixin { 
    add sourceSets.main, "azurelib.refmap.json"
    config "azurelib.mixins.json"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url 'https://api.modrinth.com/maven' } // modrinth maven
	maven { url "https://cfa2.cursemaven.com" } // curseforge maven
    maven { url "https://plugins.gradle.org/m2/" }
    mavenCentral()
}

dependencies {
    minecraft "net.neoforged:forge:${minecraftVersion}-${neoVersion}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraftVersion: minecraftVersion, minecraftVersionRange: minecraftVersionRange,
            neoVersion: neoVersion, neoVersionRange: neoVersionRange,
            neoVersionRange: neoVersionRange,
            modID: modID, modName: modName, modLicense: modLicense, modVersion: modVersion,
            modDescription: modDescription, 
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : modID,
                'Specification-Vendor'    : "AzureDoom",
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : "AzureDoom",
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    finalizedBy 'reobfJar'
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
            artifactId = project.modName
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' 
}

publishing {
  repositories {
    maven {
      name = "azurelib"
      url = "https://libs.azuredoom.com:4443/mods"
      credentials(PasswordCredentials)
      authentication {
        basic(BasicAuthentication)
      }
    }
  }
  publications {
    maven(MavenPublication) {
      groupId = project.mavenGroup
      artifactId = project.modVersion
      version = project.modName
      from components.java
    }
  }
}

processResources {
	doLast {
        def jsonMinifyStart = System.currentTimeMillis()
        def jsonMinified = 0
        def jsonBytesSaved = 0
        fileTree(dir: outputs.files.asPath, include: '**/*.json').each { 
            File file = it
            jsonMinified++
            def oldLength = file.length()
            file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
            jsonBytesSaved += oldLength - file.length()
        }
        println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
    }
}

if (file('key.properties').exists()) {
    curseforge {
        def curseProp = new Properties()
        File secretPropsFile = file("key.properties")
        curseProp.load(secretPropsFile.newInputStream())

        project {
            apiKey = curseProp.getProperty('curseKey')
            id = project.curseforgeID
            releaseType = "release"
            changelogType = 'text'
            changelog = file('changelog.txt')
            addGameVersion("${project.minecraftVersion}")
            addGameVersion("NeoForge")
            addGameVersion("Forge")
            addGameVersion("Java 17")
        }
    }
}

if (file('key.properties').exists()) {
	modrinth {
		def modrinthProp = new Properties()
		File secretPropsFile = file("key.properties")
		modrinthProp.load(secretPropsFile.newInputStream())
		
		token = modrinthProp.getProperty('modrinthKey')
		projectId = project.modrinthID
		versionNumber = project.modVersion 
		uploadFile = jar 
		changelog = rootProject.file("changelog.txt").text
		gameVersions = [project.minecraftVersion]
		loaders = ['neoforge', 'forge']
	}
}
